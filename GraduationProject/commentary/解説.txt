〇バッファ
buffer  → 緩衝器、緩和物
データを一時的に保持しておくための記憶領域

〇頂点バッファ
頂点データを格納するメモリバッファー
変換、照明の適用、クリッピングを実行するための処理

〇インデックスバッファ
インデックスデータを含むメモリバッファ
頂点バッファ無いでの頂点の並び順を指定するもの
プリミティブのレンダリングに使用される、頂点バッファへの整数オフセット

〇頂点シェーダ
受け取った座標情報を変更し、フラグメントシェーダに渡す
・頂点座標
・法線座標
・UV座標

〇フラグメントシェーダ
受け取った座標情報から見た目の調整を行う
・テクスチャ設定
・色合い設定
・ライティング処理

〇カリング
描画する必要がないポリゴンを描画しないようにする手法
DirectX(左手系)→時計回りの座標を表
OpenGL(右手系) →反時計回りの座標を表

〇視錐台カリング
オブジェクトがカメラの見える範囲内にあるかどうかで描画するかを決める
DirectXではないっぽい？
→オブジェクトに判定用球(バウンディングスフィア)を作って視錐台との当たり判定でやればできる

〇オクルージョンカリング
遮蔽物の後ろにある場合に後ろのやつは描画しないようにする
遮蔽物をオルクーダーと呼ぶ


●描画関連
〇パイプラインステート
そのオブジェクトの描画に使うシェーダー、頂点の型、ラスタライザ、ブレンド、サンプラー各ステートなどを定義するもの

〇ディスクリプタ
GPUに送ったデータをシェーダーで使用するための仕様書

〇ディスクリプタヒープ
ディスクリプタに使うデータをまとめて置いておく場所

〇ディスクリプタテーブル
ルートシグネチャ内で定義する。
ディスクリプタヒープとシェーダーのレジスタを関連付ける

〇ルートシグネチャ
ディスクリプタテーブルをまとめるもの

〇パイプラインステート
・頂点レイアウト
・頂点シェーダー
・ピクセルシェーダー
・ラスタライザーの設定
等のパラメーターを１つのオブジェクトにまとめたもの
※作成するためにルートシグネチャが必要

〇コマンドリスト、コマンドキュー
GPUにやってほしい仕事をまとめたもの
コマンドリストに命令オブジェクトを貯める→コマンドキューで貯まった命令を一気に実行できる
※描画が終わる前に次の処理が始まってしまうことがある→フェンス

〇フェンス
画面とGPUとの同期をするための機能
描画コマンドが終わるまで画面フリップを待つ、等の同期をする

〇バリア
コマンドを投げたときにリソースが何の用途に使用されるかを設定するための物


●グラフィックスパイプライン

グラフィックスパイプラインの流れ
①Input-Assembler(IA)	頂点情報やインデックス情報の入力
↓
②VertexShader(VS)	頂点シェーダー(頂点座標変換)
↓
③HullShader(HS)		春シェーダー(パッチをどう分割するかの設定)
↓
④Tesselator(TS)		テッセレータ(パッチの分割)
↓
⑤DomainShader(DS)	ドメインシェーダー(生成頂点を設定)
↓
⑥GeometryShader(GS)	ジオメトリシェーダー(頂点を増やしたりする)
↓
⑦Rasterizer(RS)		ラスタライザー(頂点をピクセル化)　
↓
⑧PixelShader(PS)	ピクセルシェーダー(テクスチャ等の参照)
↓
⑨Output-Merger(OM)	レンダーターゲットや深度への出力

VSからRSまで間を飛ばしても良い
処理の方法は主に４種類
①IA→②VS→⑦RS→⑧PS→出力
①IA→②VS→⑥GS→⑦RS→⑧PS→出力
①IA→②VS→③HS→④TS→⑤DS→⑦RS→⑧PS→出力
①IA→②VS→③HS→④TS→⑤DS→⑥GS→⑦RS→⑧PS→出力

〇InputAssembler(IA)
入力アセンブラー頂点情報(v)、頂点の順番(f)等を渡す
・頂点情報(バイトの塊)
・インデックス情報(頂点の順番等)
・頂点レイアウト(頂点情報を解釈するための物)

〇VertexShader(VS)
渡された頂点座標の変換
・平行移動、回転の変換
・カメラ用の変換
・スクリーンへ投影する変換

〇HullShader(HS)
頂点シェーダーから渡された入力パッチ情報から、出力パッチとパッチ定数を生成する
→分割数、分割の仕方の設定

〇Tesselator(TS)
ハルシェーダーで生成されたパッチ情報をもとに分割する
◦基本的に弄れない

〇DomainShader(DS)
テセレーションによってできた最終的な頂点を扱う

※テセレーション
HS,TS,DSで構成され凸凹な頂点情報でも法線マップを使わずに滑らかな表現ができる
サブディビジョンサーフェス、ハイトマップ

〇GrometryShader(GS)
プリミティブ単位で様々な処理を行う
頂点シェーダー→頂点ごとで変換
ジオメトリシェーダー→面ごとで加工
・座標の移動
・面数を増やす
シャドウボリューム、フィン法ファー表現などに活用

〇Rasterizer(RS)
ラスタライズ(ピクセル化)→プリミティブ(三角ポリゴンや線分等)をピクセルに変換する処理
◦基本的に弄れない
→ピクセル間の補間を行うか行わないか
　どちらの面を表とみなしてカリングするか
等の指定は可

〇PixelShader(PS)
塗りつぶし、テクスチャの適用
・マテリアルの色やテクスチャの色を調べる
・シェーディングを行い濃淡を計算する
・調べた情報と濃淡を合成した色情報を出力する
ポストエフェクト、シャドウマップなどにも使われる

〇Output-Merger(OM)
奥行きなどの設定
・深度テスト
→どのオブジェクトが手前にきて、どれが奥に来るのか
・ブレンド方法
→半透明ならば、先に描画されているオブジェクトとどのようにブレンドするのか


〇HLSL
シェーダー記述言語
DirectX9からHLSL(High Level Shader Language)が使用されている

〇エントリポイント
ステージに応じてGPUから呼び出される
エントリポイントを設定した関数から実行される
(C言語で言うmain関数のこと)
パイプラインステートでエントリポイントの指定ができる
基本的な書き方はC言語とほぼ一緒

